(window.webpackJsonp=window.webpackJsonp||[]).push([[44],{642:function(v,_,t){"use strict";t.r(_);var e=t(5),i=Object(e.a)({},(function(){var v=this,_=v.$createElement,t=v._self._c||_;return t("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[t("h2",{attrs:{id:"script引入方式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#script引入方式"}},[v._v("#")]),v._v(" script引入方式")]),v._v(" "),t("ul",[t("li",[t("code",[v._v("html静态 <script>引入")])]),v._v(" "),t("li",[t("code",[v._v("js 动态插入 <script>")])]),v._v(" "),t("li",[t("code",[v._v("<script defer>")]),v._v(":异步加载,元素解析完成后执行")]),v._v(" "),t("li",[t("code",[v._v("<script async>")]),v._v(":异步加载,但执行时会阻塞元素渲染")])]),v._v(" "),t("h2",{attrs:{id:"js数据类型"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#js数据类型"}},[v._v("#")]),v._v(" js数据类型")]),v._v(" "),t("ul",[t("li",[v._v("基本数据类型:"),t("code",[v._v("Number")]),v._v("、"),t("code",[v._v("String")]),v._v("、"),t("code",[v._v("Boolean")]),v._v("、"),t("code",[v._v("Null")]),v._v("、"),t("code",[v._v("Undefined")]),v._v("、"),t("code",[v._v("Symbol")]),v._v("、"),t("code",[v._v("bigInt")])]),v._v(" "),t("li",[v._v("引用数据类型:"),t("code",[v._v("Array")]),v._v("、"),t("code",[v._v("Object")]),v._v("、"),t("code",[v._v("Function")]),v._v("、"),t("code",[v._v("Date")]),v._v("、"),t("code",[v._v("RegExp")])])]),v._v(" "),t("h2",{attrs:{id:"和-的区别"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#和-的区别"}},[v._v("#")]),v._v(" == 和 === 的区别:")]),v._v(" "),t("ul",[t("li",[t("code",[v._v("==")]),v._v("非严格意义上相等\n"),t("ul",[t("li",[v._v("值相等就相等")])])]),v._v(" "),t("li",[t("code",[v._v("===")]),v._v("是严格意义上的相等,会比较两边的数据类型和值\n"),t("ul",[t("li",[v._v("值和引用地址都相等才相等")])])])]),v._v(" "),t("h2",{attrs:{id:"变量提升"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#变量提升"}},[v._v("#")]),v._v(" 变量提升:")]),v._v(" "),t("ul",[t("li",[v._v("在js中变量和函数的声明会提升到最顶部执行")]),v._v(" "),t("li",[v._v("函数的提升高于变量的提升")]),v._v(" "),t("li",[v._v("函数内部如果用var声明了相同名称的外部变量,函数将不再向上寻找")]),v._v(" "),t("li",[v._v("匿名函数不会提升")])]),v._v(" "),t("h2",{attrs:{id:"作用域链"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#作用域链"}},[v._v("#")]),v._v(" 作用域链")]),v._v(" "),t("ul",[t("li",[v._v("作用域量可以理解为一组对象列表，包含父级和自身的变量对象，因此我们便能通过作用域链访问到父级里声明的变量或者函数")])]),v._v(" "),t("h2",{attrs:{id:"this"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#this"}},[v._v("#")]),v._v(" this")]),v._v(" "),t("ul",[t("li",[v._v("this总是指向函数的直接调用者")]),v._v(" "),t("li",[v._v("如果有"),t("code",[v._v("new")]),v._v("关键字,"),t("code",[v._v("this")]),v._v("指向"),t("code",[v._v("new")]),v._v("出来的对象")]),v._v(" "),t("li",[v._v("在事件中,"),t("code",[v._v("this")]),v._v("指向触发这个事件的对象")])]),v._v(" "),t("h2",{attrs:{id:"严格模式的限制"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#严格模式的限制"}},[v._v("#")]),v._v(" 严格模式的限制")]),v._v(" "),t("ul",[t("li",[v._v("变量必须声明后使用")]),v._v(" "),t("li",[v._v("函数的参数不能有同名属性,否则报错")]),v._v(" "),t("li",[v._v("不能使用with语句")]),v._v(" "),t("li",[v._v("禁止this指向全局对象")])]),v._v(" "),t("h2",{attrs:{id:"数组-array-方法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#数组-array-方法"}},[v._v("#")]),v._v(" 数组(array)方法")]),v._v(" "),t("ul",[t("li",[t("code",[v._v("map")]),v._v(":遍历数组,放回回调返回值组成新数组")]),v._v(" "),t("li",[t("code",[v._v("forEach")]),v._v(":无法"),t("code",[v._v("break")]),v._v(",可以用"),t("code",[v._v("try/catch中throw new Error")]),v._v("来停止")]),v._v(" "),t("li",[t("code",[v._v("filter")]),v._v(": 过滤")]),v._v(" "),t("li",[t("code",[v._v("some")]),v._v(":有一项返回true,则整体为true")]),v._v(" "),t("li",[t("code",[v._v("every")]),v._v(":有一项返回false,则整体为false")]),v._v(" "),t("li",[t("code",[v._v("join")]),v._v(":通过指定连接父符生成字符串")]),v._v(" "),t("li",[t("code",[v._v("push")]),v._v("/"),t("code",[v._v("pop")]),v._v(":末尾插入和弹出,改变原数组,返回插入/弹出项")]),v._v(" "),t("li",[t("code",[v._v("unshift")]),v._v("/"),t("code",[v._v("shift")]),v._v(":头部插入和弹出,改变原数组,返回操作项")]),v._v(" "),t("li",[t("code",[v._v("sort(fn)")]),v._v("/"),t("code",[v._v("reverse")]),v._v(":排序与反转,改变原数组")]),v._v(" "),t("li",[t("code",[v._v("concat")]),v._v(":连接数组,不影响原数组,浅拷贝")]),v._v(" "),t("li",[t("code",[v._v("slice(start,end)")]),v._v(":返回截断后的新数组,不改变原数组")]),v._v(" "),t("li",[t("code",[v._v("splice(start,number,value)")]),v._v(":返回删除元素组成的数组,value为插入项目,改变原数组")]),v._v(" "),t("li",[t("code",[v._v("indexOf/lastIndexOf(value,fromIndex)")]),v._v(":查找数组项,返回对应下标")]),v._v(" "),t("li",[t("code",[v._v("reduce/reduceRight(fn(prev,cur),defaultPrev)")]),v._v(":两两执行,prev为上次简化函数的return值,cur为当前值(从第二项开始)")])]),v._v(" "),t("h2",{attrs:{id:"js数组和对象的遍历方式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#js数组和对象的遍历方式"}},[v._v("#")]),v._v(" js数组和对象的遍历方式")]),v._v(" "),t("ul",[t("li",[t("code",[v._v("for")])]),v._v(" "),t("li",[t("code",[v._v("for in")])]),v._v(" "),t("li",[t("code",[v._v("forEach")])]),v._v(" "),t("li",[t("code",[v._v("for-of")])])]),v._v(" "),t("h2",{attrs:{id:"foreach和map的区别"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#foreach和map的区别"}},[v._v("#")]),v._v(" forEach和map的区别")]),v._v(" "),t("ul",[t("li",[t("code",[v._v("forEach")]),v._v("方法,是最基本的方法,就是遍历与循环,默认参数有3个参数:分别是item、index和Array当前遍历的数组")]),v._v(" "),t("li",[t("code",[v._v("map")]),v._v("方法,基本用法与"),t("code",[v._v("forEach")]),v._v("一致,但是他会返回一个新的数组,所以callback需要有return值,如没有则返回undefined")])]),v._v(" "),t("h2",{attrs:{id:"js深浅拷贝"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#js深浅拷贝"}},[v._v("#")]),v._v(" js深浅拷贝")]),v._v(" "),t("ul",[t("li",[v._v("浅拷贝\n"),t("ul",[t("li",[t("code",[v._v("Object.assign")])])])]),v._v(" "),t("li",[v._v("深拷贝\n"),t("ul",[t("li",[v._v("可以通过"),t("code",[v._v("JSON.parse(JSON.stringify(object))")]),v._v("来解决")])])])]),v._v(" "),t("h2",{attrs:{id:"es6新增"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#es6新增"}},[v._v("#")]),v._v(" es6新增")]),v._v(" "),t("ul",[t("li",[v._v("增加了"),t("code",[v._v("let")]),v._v("和"),t("code",[v._v("const")]),v._v("命令,用来声明变量")]),v._v(" "),t("li",[v._v("新增模板字符串")]),v._v(" "),t("li",[v._v("箭头函数")]),v._v(" "),t("li",[t("code",[v._v("for-of")]),v._v("(用来遍历数据-如数组中的值。)")]),v._v(" "),t("li",[v._v("将"),t("code",[v._v("Promise")]),v._v("对象纳入规范,提供了原生的"),t("code",[v._v("Promise")]),v._v("对象")]),v._v(" "),t("li",[v._v("引入"),t("code",[v._v("module")]),v._v("模块的概念")])]),v._v(" "),t("h2",{attrs:{id:"let和const的区别"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#let和const的区别"}},[v._v("#")]),v._v(" let和const的区别")]),v._v(" "),t("ul",[t("li",[t("code",[v._v("let")]),v._v("定义变量,不存在变量提升")]),v._v(" "),t("li",[t("code",[v._v("const")]),v._v("定义常量,不能修改,但是如果定义的是对象,可以修改对象内部的数据")]),v._v(" "),t("li",[v._v("如果区中纯在"),t("code",[v._v("let")]),v._v("和"),t("code",[v._v("const")]),v._v("命令,就会形成封闭作用域")]),v._v(" "),t("li",[v._v("不允许重复声明")])]),v._v(" "),t("h2",{attrs:{id:"箭头函数与普通函数的区别"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#箭头函数与普通函数的区别"}},[v._v("#")]),v._v(" 箭头函数与普通函数的区别")]),v._v(" "),t("ul",[t("li",[v._v("普通函数体内的"),t("code",[v._v("this")]),v._v("对象,就是定义时所在的对象,而不是使用时所在的对象")]),v._v(" "),t("li",[v._v("不可当作构造函数使用,也就是说,不可使用"),t("code",[v._v("new")]),v._v("命令,否则会抛出一个错误")]),v._v(" "),t("li",[v._v("不可使用"),t("code",[v._v("arguments")]),v._v("对象,该对象在函数体内不存在。如需可用"),t("code",[v._v("Rest")]),v._v("参数代替")]),v._v(" "),t("li",[v._v("不可使用"),t("code",[v._v("yield")]),v._v("命令,因此箭头函数不能用作"),t("code",[v._v("Generator")]),v._v("函数")])]),v._v(" "),t("h2",{attrs:{id:"闭包"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#闭包"}},[v._v("#")]),v._v(" 闭包")]),v._v(" "),t("ul",[t("li",[v._v("闭包就是能够读取其它函数内部变量的函数")]),v._v(" "),t("li",[v._v("闭包基本上就是一个函数内部返回一个函数")]),v._v(" "),t("li",[v._v("好处:\n"),t("ul",[t("li",[v._v("可以读取函数内部的变量")]),v._v(" "),t("li",[v._v("将变量始终保持再内存中")]),v._v(" "),t("li",[v._v("可以封装对象的私有属性和私有方法")])])]),v._v(" "),t("li",[v._v("坏处:\n"),t("ul",[t("li",[v._v("比较耗费内存、使用不当会造成内存溢出的问题")])])])]),v._v(" "),t("h2",{attrs:{id:"js垃圾回收机制是怎样的"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#js垃圾回收机制是怎样的"}},[v._v("#")]),v._v(" JS垃圾回收机制是怎样的？")]),v._v(" "),t("ol",[t("li",[v._v("概念"),t("br"),v._v("\njs的垃圾回收机制是为了防止内存泄漏（已经不需要的某一块内存还一直存在着），垃圾回收机制就是不停歇的寻找这些不再使用的变量，并且释放掉它所指向的内存。")]),v._v(" "),t("li",[v._v("变量的生命周期"),t("br"),v._v("\n当一个变量的生命周期结束之后，它所指向的内存就会被释放。js有两种变量，局部变量和全局变量，局部变量是它在当前的函数中产生作用，当该函数结束之后，该变量内存会释放，全局变量的话会一直存在，知道浏览器关闭为止。")]),v._v(" "),t("li",[v._v("JS垃圾回收方式"),t("br"),v._v(" "),t("ul",[t("li",[v._v("有两种方式：标记清除、引用计数。")]),v._v(" "),t("li",[v._v("标记清除：大部分浏览器使用这种垃圾回收，当变量进入执行环境（生命变量）的时候，垃圾回收器将该变量进行了标记，当该变量离开环境的时候，将其再度标记，随之进行删除。")]),v._v(" "),t("li",[v._v("引用计数：这种方式常常会引起内存泄漏，主要纯在低版本浏览器。它的机制是追钟某一个值的引用次数，当声明一个变量并且将一个引用类型赋值给变量的时候引用次数加1，当这个变量指向其它一个时引用次数减1，当为0时触发回收机制进行回收。")])])])]),v._v(" "),t("h2",{attrs:{id:"内存泄漏"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#内存泄漏"}},[v._v("#")]),v._v(" 内存泄漏")]),v._v(" "),t("ul",[t("li",[v._v("定义:程序中已动态分配的堆内存由于某种原因程序未释放或无法释放引发的各种问题")]),v._v(" "),t("li",[v._v("js中可能出现的内存泄漏情况:结果:变慢,崩溃,延迟高等")]),v._v(" "),t("li",[v._v("js中可能出现的内存泄漏原因\n"),t("ul",[t("li",[v._v("全局变量")]),v._v(" "),t("li",[v._v("dom清空时,还存在引用")]),v._v(" "),t("li",[v._v("定时器未清除")]),v._v(" "),t("li",[v._v("子元素存在引起的内存泄漏")])])])]),v._v(" "),t("h2",{attrs:{id:"面向对象编程思想"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#面向对象编程思想"}},[v._v("#")]),v._v(" 面向对象编程思想")]),v._v(" "),t("ul",[t("li",[v._v("基本思想是使用对象，类，继承，封装等基本概念来进行程序设计")]),v._v(" "),t("li",[v._v("优点：\n"),t("ul",[t("li",[v._v("易维护")]),v._v(" "),t("li",[v._v("易扩展")]),v._v(" "),t("li",[v._v("开放工作的复用性、继承性高，降低重复工作量")]),v._v(" "),t("li",[v._v("缩短了开放周期")])])])]),v._v(" "),t("h2",{attrs:{id:"什么是原型、原型链、继承"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#什么是原型、原型链、继承"}},[v._v("#")]),v._v(" 什么是原型、原型链、继承？")]),v._v(" "),t("ul",[t("li",[v._v("所有函数都有prototype属性（原型）")]),v._v(" "),t("li",[v._v("所有对象都有__proto__属性")]),v._v(" "),t("li",[v._v("在JavaScript中，每个函数都有一个原型属性prototype指向自身的原型，而由这个函数创建的对象也有一个proto属性指向这个原型，而函数的原型是一个对象，所以这个对象也会有一个proto指向自己的原型，这样逐层深入知道Object对象的原型，这样就形成了原型链")])]),v._v(" "),t("h2",{attrs:{id:"异步编程的实现方式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#异步编程的实现方式"}},[v._v("#")]),v._v(" 异步编程的实现方式")]),v._v(" "),t("ul",[t("li",[v._v("回调函数\n"),t("ul",[t("li",[v._v("优点：简单、容易理解")]),v._v(" "),t("li",[v._v("缺点：不利于维护、代码耦合高")])])]),v._v(" "),t("li",[v._v("事件监听\n"),t("ul",[t("li",[v._v("优点：容易理解")]),v._v(" "),t("li",[v._v("缺点：事件驱动型，流程不够清晰")])])]),v._v(" "),t("li",[v._v("发布/订阅(观察者模式)\n"),t("ul",[t("li",[v._v("类似于事件监听,但是可以通过'消息中心',了解现在有多少发布者,多少订阅者")])])]),v._v(" "),t("li",[v._v("Promise对象\n"),t("ul",[t("li",[v._v("优点:可以利用this方法,进行链式写法,可以书写错误时的回调函数")]),v._v(" "),t("li",[v._v("缺点:编写和理解,相对较难")])])]),v._v(" "),t("li",[v._v("Generator函数\n"),t("ul",[t("li",[v._v("优点:函数体内外的数据交互、错误处理机制")]),v._v(" "),t("li",[v._v("缺点:流程管理不方便")])])]),v._v(" "),t("li",[v._v("async函数\n"),t("ul",[t("li",[v._v("优点:内置执行器、更好的语义、更广的适用性、放回的时Promise、结构清晰")]),v._v(" "),t("li",[v._v("缺点：错误吃力机制")])])])]),v._v(" "),t("h2",{attrs:{id:"什么是单线程-和异步的关系"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#什么是单线程-和异步的关系"}},[v._v("#")]),v._v(" 什么是单线程,和异步的关系？")]),v._v(" "),t("ul",[t("li",[v._v("单线程：只有一个线程，只能做一件事")]),v._v(" "),t("li",[v._v("原因：避免DOM渲染的冲突\n"),t("ul",[t("li",[v._v("浏览器需要渲染DOM")]),v._v(" "),t("li",[v._v("JS可以修改DOM结构")]),v._v(" "),t("li",[v._v("JS执行的时候，浏览器DOM渲染会暂停")]),v._v(" "),t("li",[v._v("两段JS也不能同时执行（都修改DOM就冲突了）")]),v._v(" "),t("li",[v._v("webworker支持多线程，但是不能访问DOM")])])]),v._v(" "),t("li",[v._v("解决方案：异步")])]),v._v(" "),t("h2",{attrs:{id:"同源策略"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#同源策略"}},[v._v("#")]),v._v(" 同源策略")]),v._v(" "),t("ul",[t("li",[v._v("同源是指域名、协议、端口号相同")])]),v._v(" "),t("h2",{attrs:{id:"如何解决跨域"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#如何解决跨域"}},[v._v("#")]),v._v(" 如何解决跨域")]),v._v(" "),t("ul",[t("li",[t("code",[v._v("jsonp")]),v._v("跨域")]),v._v(" "),t("li",[t("code",[v._v("document.domain + iframe")]),v._v("跨域")]),v._v(" "),t("li",[t("code",[v._v("node.js")]),v._v("中间件代理跨域")]),v._v(" "),t("li",[v._v("后端在头部信息里设置安全域名")])]),v._v(" "),t("h2",{attrs:{id:"attribute和property的区别"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#attribute和property的区别"}},[v._v("#")]),v._v(" attribute和property的区别")]),v._v(" "),t("ul",[t("li",[t("code",[v._v("attribute")]),v._v("是dom元素在文档中作为html标签拥有的属性")]),v._v(" "),t("li",[t("code",[v._v("property")]),v._v("是dom元素在js中作为对象拥有的属性")]),v._v(" "),t("li",[v._v("对于html的标准属性来说,"),t("code",[v._v("attribute")]),v._v("和"),t("code",[v._v("property")]),v._v("是同步的,是会自动更新的")]),v._v(" "),t("li",[v._v("但是对于自定义的属性来说,他们是不同步的")])]),v._v(" "),t("h2",{attrs:{id:"项目性能优化"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#项目性能优化"}},[v._v("#")]),v._v(" 项目性能优化")]),v._v(" "),t("ul",[t("li",[v._v("减少http请求")]),v._v(" "),t("li",[v._v("减少DNS查询")]),v._v(" "),t("li",[v._v("使用CDN")]),v._v(" "),t("li",[v._v("避免重定向")]),v._v(" "),t("li",[v._v("图片懒加载")]),v._v(" "),t("li",[v._v("减少DOM元素数量")]),v._v(" "),t("li",[v._v("减少DOM操作")]),v._v(" "),t("li",[v._v("使用外部JavaScript和CSS")]),v._v(" "),t("li",[v._v("压缩JavaScript、CSS、字体、图片等")]),v._v(" "),t("li",[v._v("优化Css Sprite")]),v._v(" "),t("li",[v._v("使用iconfont")]),v._v(" "),t("li",[v._v("多域名分发划分内容到不同域名")]),v._v(" "),t("li",[v._v("尽量减少iframe使用")]),v._v(" "),t("li",[v._v("避免图片src为空")]),v._v(" "),t("li",[v._v("把样式表放在link中")]),v._v(" "),t("li",[v._v("把JavaScript放在页面底部")])]),v._v(" "),t("h2",{attrs:{id:"负载均衡"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#负载均衡"}},[v._v("#")]),v._v(" 负载均衡？")]),v._v(" "),t("ul",[t("li",[v._v("单台服务器共同协作，不让其中某一台或几台超额工作，发挥服务器的最大作用")]),v._v(" "),t("li",[v._v("http重定向负载均衡：调度这根据策略选择服务器以302响应请求，缺点只有第一次有效果，后续操作维持在该服务器dns负载均衡：\n解析域名是，访问多个ip服务器中的一个(可监控性较弱) 原因-避免DOM渲染的冲突")]),v._v(" "),t("li",[v._v("反向代理负载均衡：访问统一服务器，由服务器进行调度访问实际某个服务器，对统一的服务器要求大，性能受到服务器群的数量")])]),v._v(" "),t("h2",{attrs:{id:"逐进增强和优雅降级"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#逐进增强和优雅降级"}},[v._v("#")]),v._v(" 逐进增强和优雅降级")]),v._v(" "),t("ul",[t("li",[v._v("逐进增强：针对低版本浏览器进行构建页面，保证最基本的功能，然后再针对高版本浏览器进行效果、交互等改进和追加功能达到更好的用户体验")]),v._v(" "),t("li",[v._v("优雅降级：一开始就构建完整的功能，然后再对低版本浏览器进行兼容")])])])}),[],!1,null,null,null);_.default=i.exports}}]);