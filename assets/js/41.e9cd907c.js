(window.webpackJsonp=window.webpackJsonp||[]).push([[41],{639:function(e,s,r){"use strict";r.r(s);var t=r(5),c=Object(t.a)({},(function(){var e=this,s=e.$createElement,r=e._self._c||s;return r("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[r("h2",{attrs:{id:"src与href的区别"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#src与href的区别"}},[e._v("#")]),e._v(" src与href的区别")]),e._v(" "),r("ul",[r("li",[r("code",[e._v("src")]),e._v("用于替换当前元素,"),r("code",[e._v("href")]),e._v("用于在当前文文档和应用资源之间确立联系")]),e._v(" "),r("li",[r("code",[e._v("src")]),e._v(" 是 source 的缩写，指向外部资源的位置，指向的内容将会嵌⼊到⽂档中当前标签所在位置；在请求 "),r("code",[e._v("src")]),e._v(" 资源时会将其指向的资源下载并应⽤到⽂档内，例如 js 脚本，img 图⽚和 frame 等元素")]),e._v(" "),r("li",[r("code",[e._v('<script src ="js.js"><\/script>')]),e._v(" 当浏览器解析到该元素时，会暂停其他资源的下载和处理，直到将该资源加载、编译、执⾏完毕，图⽚和框架等元素也如此，类似于将所指向资源嵌⼊当前标签内。这也是为什么将js脚本放在底部⽽不是头部")]),e._v(" "),r("li",[r("code",[e._v("href")]),e._v(" 是 Hypertext Reference 的缩写，指向⽹络资源所在位置，建⽴和当前元素（锚点）或当前⽂\n档（链接）之间的链接，如果我们在⽂档中添加")]),e._v(" "),r("li",[r("code",[e._v('<link href="common.css" rel="stylesheet"/>')]),e._v(" 那么浏览器会识别该⽂档为 css ⽂件，就会并⾏下载资源并且不会停⽌对当前⽂档的处理。这也是为什么建议使⽤ link ⽅式来加载 css ，⽽不是使⽤ @import ⽅式")])])])}),[],!1,null,null,null);s.default=c.exports}}]);